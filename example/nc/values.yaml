## Official nextcloud image version
## ref: https://hub.docker.com/r/library/nextcloud/tags/
##
image:
  repository: nextcloud
  flavor: fpm
  #flavor: apache
  # default is generated by flavor and appVersion
  #tag: fpm
  tag:
  pullPolicy: IfNotPresent
  # pullSecrets:
  #   - myRegistrKeySecretName

nameOverride: ""
fullnameOverride: ""
podAnnotations: {}
deploymentAnnotations: {}
deploymentLabels: {}

# Number of replicas to be deployed
replicaCount: 1

## Allowing use of ingress controllers
## ref: https://kubernetes.io/docs/concepts/services-networking/ingress/
##
ingress:
  enabled: true
  className: nginx
  tls:
    - secretName: nextcloud-example-tls
      hosts:
        - nextcloud.example.com
  hosts: [ nextcloud.example.com ]
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-passthrough: "true"
    nginx.ingress.kubernetes.io/rewrite-target: /
    cert-manager.io/cluster-issuer: mkcert-issuer
    nginx.ingress.kubernetes.io/proxy-body-size: 4G
    #kubernetes.io/tls-acme: "true"
    #cert-manager.io/cluster-issuer: letsencrypt-prod
    # Keep this in sync with the README.md:
    nginx.ingress.kubernetes.io/server-snippet: |-
      server_tokens off;
      proxy_hide_header X-Powered-By;
      rewrite ^/.well-known/webfinger /index.php/.well-known/webfinger last;
      rewrite ^/.well-known/nodeinfo /index.php/.well-known/nodeinfo last;
      rewrite ^/.well-known/host-meta /public.php?service=host-meta last;
      rewrite ^/.well-known/host-meta.json /public.php?service=host-meta-json;
      location = /.well-known/carddav {
        return 301 $scheme://$host/remote.php/dav;
      }
      location = /.well-known/caldav {
        return 301 $scheme://$host/remote.php/dav;
      }
      location = /robots.txt {
        allow all;
        log_not_found off;
        access_log off;
      }
      location ~ ^/(?:build|tests|config|lib|3rdparty|templates|data)/ {
        deny all;
      }
      location ~ ^/(?:autotest|occ|issue|indie|db_|console) {
        deny all;
      }
  labels: {}
  path: /
  pathType: Prefix

lifecycle: {}

phpClientHttpsFix:
  enabled: true
  protocol: https

nextcloud:
  host: nextcloud.example.com
  #username: admin
  #password:
  ## Use an existing secret
  existingSecret:
    enabled: true
    secretName: examplenc-secrets
    usernameKey: nextcloud-username
    passwordKey: nextcloud-password
    tokenKey: nextcloud-token
    smtpUsernameKey: smtp-username
    smtpPasswordKey: smtp-password
    smtpHostKey: smtp-host
  update: 0
  # If web server is not binding default port, you can define it
  containerPort: 80
  datadir: /var/www/html/data
  persistence:
    storageClass: "example-hostpath"
    subPath:
  # if set, we'll template this list to the NEXTCLOUD_TRUSTED_DOMAINS env var
  trustedDomains:
    - nextcloud.example.com
  ## SMTP configuration
  mail:
    enabled: true
    # the user we send email as
    fromAddress: wekan
    # the domain we send email from
    domain: example.com
    smtp:
      #host: domain.com
      secure: ssl
      port: 465
      authtype: LOGIN
      #name: user
      #password: pass
  ## Primary ObjectStore options
  # see: https://docs.nextcloud.com/server/latest/admin_manual/configuration_files/primary_storage.html#configuring-object-storage-as-primary-storage
  objectStore:
    # https://docs.nextcloud.com/server/latest/admin_manual/configuration_files/primary_storage.html#simple-storage-service-s3
    s3:
      enabled: false
      # ignored if nextcloud.objectstore.s3.existingSecret is not empty string
      accessKey: ""
      # ignored if nextcloud.objectstore.s3.existingSecret is not empty string
      secretKey: ""
      # use legacy auth method
      legacyAuth: false
      # s3 endpoint to use; only required if you're not using AWS
      host: ""
      # use TLS/SSL for S3 connections
      ssl: true
      # default port that can be changed based on your object store, e.g. for minio, you can use 9000
      port: "443"
      # this is the default in the nextcloud docs
      region: "eu-west-1"
      # required if using s3, the name of the bucket you'd like to use
      bucket: ""
      # object prefix in bucket
      prefix: ""
      # set to true if you are not using DNS for your buckets.
      usePathStyle: false
      # autocreate the bucket
      autoCreate: false
      # optonal parameter: you probably want to keep this as default
      storageClass: "STANDARD"
      # server side encryption key. learn more: https://docs.nextcloud.com/server/latest/admin_manual/configuration_files/primary_storage.html#s3-sse-c-encryption-support
      sse_c_key: ""
      # use an existingSecret for S3 credentials. If set, we ignore the following under nextcloud.objectStore.s3
      # endpoint, accessKey, secretKey
      existingSecret: ""
      secretKeys:
        # key in nextcloud.objectStore.s3.existingSecret to use for s3 endpoint
        host: ""
        # key in nextcloud.objectStore.s3.existingSecret to use for s3 accessKeyID
        accessKey: ""
        # key in nextcloud.objectStore.s3.existingSecret to use for s3 secretAccessKey
        secretKey: ""
        # key in nextcloud.objectStore.s3.existingSecret to use for the s3 bucket
        bucket: ""
        # key in nextcloud.objectStore.s3.existingSecret to use for the s3 sse_c_key
        sse_c_key: ""
    ## options related to using Swift as a primary object storage
    # https://docs.nextcloud.com/server/latest/admin_manual/configuration_files/primary_storage.html#openstack-swift
    swift:
      enabled: false
      # swift user info
      user:
        domain: "Default"
        name: ""
        password: ""
      # swift project info
      project:
        name: ""
        domain: "Default"
      # The Identity / Keystone endpoint
      url: ""
      region: ""
      # optional on some swift implementations
      service: "swift"
      # the container to store the data in
      container: ""
      # autocreate container
      autoCreate: false

  ## PHP Configuration files
  # Will be injected in /usr/local/etc/php/conf.d for apache image and in /usr/local/etc/php-fpm.d when nginx.enabled: true
  phpConfigs: {}
  ## Default config files that utilize environment variables:
  # see: https://github.com/nextcloud/docker/tree/master#auto-configuration-via-environment-variables
  # IMPORTANT: Will be used only if you put extra configs, otherwise default will come from nextcloud itself
  # Default confgurations can be found here: https://github.com/nextcloud/docker/tree/master/.config
  defaultConfigs:
    # To protect /var/www/html/config
    .htaccess: true
    # Apache configuration for rewrite urls
    apache-pretty-urls.config.php: true
    # Define APCu as local cache
    apcu.config.php: true
    # Apps directory configs
    apps.config.php: true
    # Used for auto configure database
    autoconfig.php: true
    # Redis default configuration
    redis.config.php: true
    # Reverse proxy default configuration
    reverse-proxy.config.php: true
    # S3 Object Storage as primary storage
    s3.config.php: true
    # SMTP default configuration via environment variables
    smtp.config.php: true
    # Swift Object Storage as primary storage
    swift.config.php: true
    # disables the web based updater as the default nextcloud docker image does not support it
    upgrade-disable-web.config.php: true
    # -- imaginary support config
    imaginary.config.php: true

  # Extra config files created in /var/www/html/config/
  # ref: https://docs.nextcloud.com/server/latest/admin_manual/configuration_server/config_sample_php_parameters.html#multiple-config-php-file
  configs:
  # For example, to enable image and text file previews:
    previews.config.php: |-
      <?php
      $CONFIG = array (
        'enable_previews' => true,
        'enabledPreviewProviders' => array (
          'OC\Preview\Movie',
          'OC\Preview\PNG',
          'OC\Preview\JPEG',
          'OC\Preview\GIF',
          'OC\Preview\BMP',
          'OC\Preview\XBitmap',
          'OC\Preview\MP3',
          'OC\Preview\MP4',
          'OC\Preview\TXT',
          'OC\Preview\MarkDown',
          'OC\Preview\PDF'
        ),
      );

    proxies.config.php: |-
      <?php
      $CONFIG = array (
        'trusted_proxies' =>
        array(
        0 => '127.0.0.1',
        1 => '10.0.0.0/8',
        ),
        'forwarded_for_headers' => array('HTTP_X_FORWARDED_FOR'),
      );

    domains.config.php: |-
      <?php
      $CONFIG = array (
        'trusted_domains' =>
        array(
        0 => 'nextcloud.example.com',
        ),
      );

    overwrite.config.php: |-
      <?php
      $CONFIG = array (
        'overwriteprotocol' => 'https',
        'maintenance_window_start' => 1,
        'overwrite.cli.url' => 'https://nextcloud.example.com/',
      );
  # For example, to enable image and text file previews:
  # previews.config.php: |-
  #   <?php
  #   $CONFIG = array (
  #     'enable_previews' => true,
  #     'enabledPreviewProviders' => array (
  #       'OC\Preview\Movie',
  #       'OC\Preview\PNG',
  #       'OC\Preview\JPEG',
  #       'OC\Preview\GIF',
  #       'OC\Preview\BMP',
  #       'OC\Preview\XBitmap',
  #       'OC\Preview\MP3',
  #       'OC\Preview\MP4',
  #       'OC\Preview\TXT',
  #       'OC\Preview\MarkDown',
  #       'OC\Preview\PDF'
  #     ),
  #   );

  # proxies.config.php: |-
  #   <?php
  #   $CONFIG = array (
  #     'trusted_proxies' =>
  #     array(
  #     0 => 'nextcloud.example.com',
  #     ),
  #   );

  # domains.config.php: |-
  #   <?php
  #   $CONFIG = array (
  #     'trusted_domains' =>
  #     array(
  #     0 => 'nextcloud.example.com',
  #     ),
  #   );

  # overwrite.config.php: |-
  #   <?php
  #   $CONFIG = array (
  #     'overwriteprotocol' => 'https'
  #   );

  hooks:
    pre-installation:
    post-installation:
    pre-upgrade:
    post-upgrade:
    before-starting:
  strategy:
    type: Recreate
nginx:
  enabled: true
  image:
    repository: nginx
    tag: alpine
    pullPolicy: IfNotPresent
  containerPort: 80
  ipFamilies:
    - IPv4
  config:
    default: true
    headers:
      "Strict-Transport-Security": ""
      "Referrer-Policy": "no-referrer"
      "X-Content-Type-Options": "nosniff"
      "X-Download-Options": "noopen"
      "X-Frame-Options": "SAMEORIGIN"
      "X-Permitted-Cross-Domain-Policies": "none"
      "X-Robots-Tag": "noindex, nofollow"
      "X-XSS-Protection": "1; mode=block"
    custom:
  resources: {}
  securityContext: {}
  extraEnv: []

internalDatabase:
  enabled: false
  name: nextcloud

externalDatabase:
  enabled: true
  type: postgresql
  existingSecret:
    enabled: true
    secretName: examplenc-secrets 
    usernameKey: db-username
    passwordKey: db-password
    hostKey: db-hostname
    databaseKey: db-name

  global:
    defaultStorageClass: "example-hostpath"

  auth:
    database: nextcloud
    username: nextcloud
    password: changeme
    existingSecret: ""

  architecture: standalone

  primary:
    persistence:
      enabled: false
      existingClaim: ""
      storageClass: ""
      accessMode: ReadWriteOnce
      size: 8Gi
postgresql:
  enabled: false
  global:
    postgresql:
      auth:
        username: examplenc
        database: examplenc
        existingSecret: "examplenc-secrets"
        secretKeys:
          adminPasswordKey: "db-admin-pass"
          userPasswordKey: "db-password"
          replicationPasswordKey: "db-replication-key"
  primary:
    persistence:
      enabled: true
      storageClass: "example-hostpath"
redis:
  enabled: false
  auth:
    enabled: true
    existingSecret: "examplenc-secrets"
    existingSecretPasswordKey: "redis-pass"
  global:
    storageClass: "example-hostpath"
  master:
    persistence:
      enabled: true
  replica:
    persistence:
      enabled: true

collabora:
  enabled: true
  autoscaling:
    enabled: false
  collabora:
    aliasgroups:
      - host: "https://nextcloud.example.com:443"
    extra_params: --o:ssl.enable=false
    server_name: collabora.example.com
    existingSecret:
      # set to true to to get collabora admin credentials from an existin secret
      # if set, ignores collabora.collabora.username and password
      enabled: true
      # name of existing Kubernetes Secret with collboara admin credentials
      secretName: "examplenc-secrets"
      usernameKey: "collabora-username"
      passwordKey: "collabora-password"
  ingress:
    enabled: true
    className: "nginx"
    annotations:
      kubernetes.io/ingress.class: nginx
      nginx.ingress.kubernetes.io/ssl-passthrough: "true"
      nginx.ingress.kubernetes.io/rewrite-target: /
      cert-manager.io/cluster-issuer: mkcert-issuer
    hosts:
      - host: collabora.example.com
        paths:
        - path: /
          pathType: ImplementationSpecific
    tls:
      - secretName: collabora-example-ingress-tls
        hosts:
          - collabora.example.com

cronjob:
  enabled: true

  resources: {}

  lifecycle: {}
  securityContext: {}

service:
  type: ClusterIP
  port: 8080
  loadBalancerIP: ""
  nodePort:
  annotations: {}

persistence:
  enabled: true
  annotations:
  storageClass: "example-hostpath"
  storageClassName: "example-hostpath"

  accessMode: ReadWriteOnce
  size: 8Gi

  nextcloudData:
    enabled: true
    subPath:
    annotations: {}
    # storageClass: "-"
    # storageClass: "example-hostpath"
    storageClass: "example-hostpath"
    # existingClaim:
    accessMode: ReadWriteOnce
    size: 8Gi
imaginary:
  enabled: true
  replicaCount: 1

  image:
    registry: docker.io
    repository: h2non/imaginary
    tag: 1.2.4
    pullPolicy: IfNotPresent
    pullSecrets: []

  podAnnotations: {}
  podLabels: {}
  resources: {}

  securityContext:
    runAsUser: 1000
    runAsNonRoot: true

  podSecurityContext: {}

  readinessProbe:
    enabled: true
    failureThreshold: 3
    successThreshold: 1
    periodSeconds: 10
    timeoutSeconds: 1
  livenessProbe:
    enabled: true
    failureThreshold: 3
    successThreshold: 1
    periodSeconds: 10
    timeoutSeconds: 1

  service:
    type: ClusterIP
    loadBalancerIP:
    nodePort:
    annotations: {}
    labels: {}

metrics:
  enabled: false

  replicaCount: 1
  server: ""
  https: false
  token: ""
  timeout: 5s
  tlsSkipVerify: false
  info:
    apps: false

  image:
    repository: xperimental/nextcloud-exporter
    tag: 0.6.2
    pullPolicy: IfNotPresent
    # pullSecrets:
  service:
    type: ClusterIP
    loadBalancerIP:
    annotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "9205"
    labels: {}

  securityContext:
    runAsUser: 1000
    runAsNonRoot: true

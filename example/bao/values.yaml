global:
  enabled: true
  namespace: example
  tlsDisable: true
  serverTelemetry:
    prometheusOperator: true
injector:
  leaderElector:
    enabled: false
  metrics:
    enabled: false
  authPath: "auth/kubernetes"
  logLevel: "info"
  logFormat: "standard"
  revokeOnShutdown: false
server:
  enabled: "-"
  ingress:
    enabled: true
    annotations:
      nginx.ingress.kubernetes.io/rewrite-target: /
      cert-manager.io/cluster-issuer: mkcert-issuer
      spec.ingressClassName: nginx
    # Optionally use ingressClassName instead of deprecated annotation.
    # See: https://kubernetes.io/docs/concepts/services-networking/ingress/#deprecated-annotation
    ingressClassName: "nginx"
    activeService: true
    hosts:
      - host: bao.example.com
        paths: []
    tls:
      - secretName: chart-example-openbao-tls
        hosts:
          - bao.example.com
  hostAliases:
    - ip: 127.0.0.1
      hostnames:
        - bao.example.com
  authDelegator:
    enabled: true
  # This configures the OpenBao Statefulset to create a PVC for data
  # storage when using the file or raft backend storage engines.
  # See https://openbao.org/docs/configuration/storage to know more
  dataStorage:
    enabled: true
    # Size of the PVC created
    size: 20Gi
    # Location where the PVC will be mounted.
    mountPath: "/openbao/data"
    # Name of the storage class to use.  If null it will use the
    # configured default Storage Class.
    storageClass: "example-hostpath"
    # Access Mode of the storage device being used for the PVC
    accessMode: ReadWriteOnce
  auditStorage:
    enabled: true
    # Size of the PVC created
    size: 20Gi
    # Location where the PVC will be mounted.
    mountPath: "/openbao/audit"
    # Name of the storage class to use.  If null it will use the
    # configured default Storage Class.
    storageClass: "example-hostpath"
    # Access Mode of the storage device being used for the PVC
    accessMode: ReadWriteOnce
  statefulSet:
    # Extra annotations for the statefulSet. This can either be YAML or a
    # YAML-formatted multi-line templated string map of the annotations to apply
    # to the statefulSet.
    annotations: {}

    # Set the pod and container security contexts.
    # If not set, these will default to, and for *not* OpenShift:
    # pod:
    #   runAsNonRoot: true
    #   runAsGroup: {{ .Values.server.gid | default 1000 }}
    #   runAsUser: {{ .Values.server.uid | default 100 }}
    #   fsGroup: {{ .Values.server.gid | default 1000 }}
    # container:
    #   allowPrivilegeEscalation: false
    #
    # If not set, these will default to, and for OpenShift:
    # pod: {}
    # container: {}
    securityContext:
      pod: {}
      container: {}

  # Should the server pods run on the host network
  hostNetwork: false

# OpenBao UI
ui:
  # True if you want to create a Service entry for the OpenBao UI.
  #
  # serviceType can be used to control the type of service created. For
  # example, setting this to "LoadBalancer" will create an external load
  # balancer (for supported K8S installations) to access the UI.
  enabled: true
  publishNotReadyAddresses: true
  # The service should only contain selectors for active OpenBao pod
  activeOpenbaoPodOnly: false
  serviceType: "ClusterIP"
  serviceNodePort: null
  externalPort: 8200
  targetPort: 8200
# secrets-store-csi-driver-provider-vault
csi:
  # -- True if you want to install a secrets-store-csi-driver-provider-vault daemonset.
  #
  # Requires installing the secrets-store-csi-driver separately, see:
  # https://github.com/kubernetes-sigs/secrets-store-csi-driver#install-the-secrets-store-csi-driver
  #
  # With the driver and provider installed, you can mount OpenBao secrets into volumes
  # similar to the OpenBao Agent injector, and you can also sync those secrets into
  # Kubernetes secrets.
  enabled: false
  # Settings for the daemonSet used to run the provider.
# For more information see:
# https://openbao.org/docs/configuration/telemetry
# https://openbao.org/docs/internals/telemetry
serverTelemetry:
  # Enable support for the Prometheus Operator. Currently, this chart does not support
  # authenticating to OpenBao's metrics endpoint, so the following `telemetry{}` must be included
  # in the `listener "tcp"{}` stanza
  #  telemetry {
  #    unauthenticated_metrics_access = "true"
  #  }
  #
  # See the `standalone.config` for a more complete example of this.
  #
  # In addition, a top level `telemetry{}` stanza must also be included in the OpenBao configuration:
  #
  # example:
  #  telemetry {
  #    prometheus_retention_time = "30s"
  #    disable_hostname = true
  #  }
  #
  # Configuration for monitoring the OpenBao server.
  serviceMonitor:
    # The Prometheus operator *must* be installed before enabling this feature,
    # if not the chart will fail to install due to missing CustomResourceDefinitions
    # provided by the operator.
    #
    # Instructions on how to install the Helm chart can be found here:
    #  https://github.com/prometheus-community/helm-charts/tree/main/charts/kube-prometheus-stack
    # More information can be found here:
    #  https://github.com/prometheus-operator/prometheus-operator
    #  https://github.com/prometheus-operator/kube-prometheus

    # Enable deployment of the OpenBao Server ServiceMonitor CustomResource.
    enabled: true

    # Selector labels to add to the ServiceMonitor.
    # When empty, defaults to:
    #  release: prometheus
    selectors: {}

    # Interval at which Prometheus scrapes metrics
    interval: 30s

    # Timeout for Prometheus scrapes
    scrapeTimeout: 10s

  prometheusRules:
    # The Prometheus operator *must* be installed before enabling this feature,
    # if not the chart will fail to install due to missing CustomResourceDefinitions
    # provided by the operator.

    # Deploy the PrometheusRule custom resource for AlertManager based alerts.
    # Requires that AlertManager is properly deployed.
    enabled: true

    # Selector labels to add to the PrometheusRules.
    # When empty, defaults to:
    #  release: prometheus
    selectors: {}

    # Some example rules.
    rules: []
    #  - alert: vault-HighResponseTime
    #    annotations:
    #      message: The response time of OpenBao is over 500ms on average over the last 5 minutes.
    #    expr: vault_core_handle_request{quantile="0.5", namespace="mynamespace"} > 500
    #    for: 5m
    #    labels:
    #      severity: warning
    #  - alert: vault-HighResponseTime
    #    annotations:
    #      message: The response time of OpenBao is over 1s on average over the last 10 minutes.
    #    expr: vault_core_handle_request{quantile="0.5", namespace="mynamespace"} > 1000
    #    for: 10m
    #    labels:
    #      severity: critical
